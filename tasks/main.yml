#SPDX-License-Identifier: MIT-0
---
# tasks file for listmonk
- name: Check prerequisites
  ansible.builtin.include_tasks: prereqs.yml
  tags:
    - prereqs
    - always

- name: Check for deprecations
  ansible.builtin.include_tasks: deprecations.yml
  tags:
    - always

- name: Distro specific tasks
  ansible.builtin.include_tasks: "{{ ansible_os_family | lower }}.yml"
  tags:
    - unbound

- name: Include install tasks
  ansible.builtin.include_tasks: install.yml
  tags:
    - install

- name: Include systemd tasks
  ansible.builtin.include_tasks: systemd.yml
  tags:
    - systemd

- name: Include config.toml file tasks
  when: listmonk.service_start_with_config
  ansible.builtin.include_tasks: config_store.yml
  tags:
    - install

- name: Check if Listmonk was bootstrapped using ansible_local fact
  ansible.builtin.set_fact:
    listmonk_already_bootstrapped: "{{ ansible_local.listmonk.general.bootstrapped | default(false) }}"

- name: Ensure PostgreSQL is available
  block:
    - name: Wait for PostgreSQL to be available
      ansible.builtin.wait_for:
        host: "{{ listmonk_config_db_host }}"
        port: "{{ listmonk_config_db_port }}"
        state: started
        timeout: 60
        delay: 5
      become: true
  rescue:
    - name: Fail and show that PostgreSQL is unreachable
      ansible.builtin.fail:
        msg: "❌ Aborting: Could not connect to PostgreSQL at {{ listmonk_config_db_host }}:{{ listmonk_config_db_port }}."

- name: Force install of database scheme once and create API user
  shell: >
    {{ listmonk.home }}/bin/listmonk --config {{ listmonk.config_dir }}/config.toml --install {{ listmonk_bootstrap_install_args }} --yes 2>&1
  environment:
    LISTMONK_ADMIN_USER: "{{ listmonk_bootstrap_LISTMONK_ADMIN_USER }}"
    LISTMONK_ADMIN_PASSWORD: "{{ listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD }}"
    LISTMONK_ADMIN_API_USER: "{{ listmonk_bootstrap_LISTMONK_ADMIN_API_USER }}"
  register: listmonk_bootstrap_output
  changed_when: true
  when: not listmonk_already_bootstrapped
  no_log: "{{ not (debug_mode | default(false)) }}"

- name: Debug listmonk install output (dev only)
  debug:
    var: listmonk_bootstrap_output.stdout_lines
  when:
    - not listmonk_already_bootstrapped
    - debug_mode | default(false)

- name: Find line containing API token
  set_fact:
    listmonk_api_token_line: >-
      {{
        (listmonk_bootstrap_output.stdout_lines
         | select('search', 'LISTMONK_ADMIN_API_TOKEN=')
         | list
        ) | first | default('')
      }}
  when:
    - not listmonk_already_bootstrapped
    - listmonk.override_settings
  no_log: "{{ not (debug_mode | default(false)) }}"

- name: Extract API token from found line using split
  set_fact:
    listmonk_api_token: "{{ (listmonk_api_token_line.split('LISTMONK_ADMIN_API_TOKEN=\"')[1].split('\"')[0]).strip() if 'LISTMONK_ADMIN_API_TOKEN=\"' in listmonk_api_token_line else '' }}"
  when:
    - not listmonk_already_bootstrapped
    - listmonk.override_settings
    - listmonk_api_token_line != ''
    - listmonk_api_token_line.count('"') >= 2
  no_log: "{{ not (debug_mode | default(false)) }}"

- name: Check if Listmonk API token is valid and ready to use
  when:
    - listmonk.override_settings
  no_log: "{{ not (debug_mode | default(false)) }}"
  block:
    - name: Validate presence of Listmonk API token
      ansible.builtin.assert:
        that:
          - listmonk_api_token is defined and listmonk_api_token != ""
        fail_msg: "API token is missing or invalid"
        quiet: "true"
  rescue:
    - name: Fail due to missing API token
      ansible.builtin.fail:
        msg: >
          ❌ Unable to get valid token. (listmonk_already_bootstrapped={{ listmonk_already_bootstrapped }})
          If this fails when listmonk_already_bootstrapped is False check listmonk_bootstrap_output.
          If this fails when listmonk_already_bootstrapped is True you can set listmonk_api_token variable.

- name: "Before overriding settings we need to start and wait for listmonk service"
  ansible.builtin.include_tasks: start.yml
  when:
    - listmonk.override_settings

- name: Override Listmonk settings via API
  uri:
    url: "{{ listmonk.api_url }}/settings"
    method: PUT
    headers:
      Authorization: "token {{ listmonk_bootstrap_LISTMONK_ADMIN_API_USER }}:{{ listmonk_api_token }}"
      Content-Type: "application/json"
    body_format: raw
    body: "{{ listmonk.api_settings_payload | to_json }}"
    status_code: 200
  when:
    - listmonk.override_settings
    - listmonk_api_token is defined and listmonk_api_token | length > 0
  register: api_config_result
  changed_when: api_config_result.json.data | default(false) | bool
  no_log: "{{ not (debug_mode | default(false)) }}"

- name: "After override settings we need to restart and wait for listmonk service"
  ansible.builtin.include_tasks: restart.yml
  when:
    - listmonk.override_settings

- name: "Before overriding settings we need to start and wait for listmonk service"
  ansible.builtin.include_tasks: start.yml
  when:
    - listmonk.override_settings

- name: Check service status
  ansible.builtin.systemd_service:
    name: "{{ listmonk.service_name }}"
  register: listmonk_service_status
  changed_when: false
  when:
    - not ansible_local.listmonk.general.bootstrapped | default(false) | bool

- name: "Notify that setup was bootstrapped successfully"
  when:
    - not ansible_local.listmonk.general.bootstrapped | default(false) | bool # it was not bootstrapped prior to the current role's execution
    - listmonk_service_status.status.ActiveState == "active"                  # but it is now
  ansible.builtin.debug:
    msg: "Setup bootstrapped successfully"
  changed_when: true
  notify:
    - bootstrapped

- name: Flush pending handlers
  ansible.builtin.meta: flush_handlers
