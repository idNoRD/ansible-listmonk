#SPDX-License-Identifier: MIT-0
---
# tasks file for listmonk
  - name: Check prerequisites
    ansible.builtin.include_tasks: prereqs.yml
    tags:
      - prereqs
      - always

  - name: Check for deprecations
    ansible.builtin.include_tasks: deprecations.yml
    tags:
      - always

  - name: Distro specific tasks
    ansible.builtin.include_tasks: "{{ ansible_os_family | lower }}.yml"
    tags:
      - unbound

  - name: Include install tasks
    ansible.builtin.include_tasks: install.yml
    tags:
      - install

  - name: Include systemd tasks
    ansible.builtin.include_tasks: systemd.yml
    tags:
      - systemd

  - name: Include config.toml file tasks
    when: listmonk.service_start_with_config
    ansible.builtin.include_tasks: config_store.yml
    tags:
      - install

  - name: Check if Listmonk was bootstrapped using ansible_local fact
    ansible.builtin.set_fact:
      listmonk_already_bootstrapped: "{{ ansible_local.listmonk.general.bootstrapped | default(false) }}"

  - name: Ensure PostgreSQL is available
    block:
      - name: Wait for PostgreSQL to be available
        ansible.builtin.wait_for:
          host: "{{ listmonk_config_db_host }}"
          port: "{{ listmonk_config_db_port }}"
          state: started
          timeout: 60
          delay: 5
        become: true
    rescue:
      - name: Fail and show that PostgreSQL is unreachable
        ansible.builtin.fail:
          msg: "❌ Aborting: Could not connect to PostgreSQL at {{ listmonk_config_db_host }}:{{ listmonk_config_db_port }}."

  - name: Force install of database scheme once and create API user
    shell: >
      {{ listmonk.home }}/bin/listmonk --config {{ listmonk.config_dir }}/config.toml --install --idempotent --yes 2>&1
    environment:
      LISTMONK_ADMIN_USER: "{{ listmonk_bootstrap_LISTMONK_ADMIN_USER }}"
      LISTMONK_ADMIN_PASSWORD: "{{ listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD }}"
      LISTMONK_ADMIN_API_USER: "{{ listmonk_bootstrap_LISTMONK_ADMIN_API_USER }}"
    register: listmonk_bootstrap_output
    when: not listmonk_already_bootstrapped
    no_log: "{{ not debug_mode | default(false) }}"

  - name: Debug listmonk install output (dev only)
    debug:
      var: listmonk_bootstrap_output.stdout_lines
    when: debug_mode | default(false)

  - name: Extract API token from stdout_lines safely
    set_fact:
      listmonk_api_token: >-
        {{
          (
            (listmonk_bootstrap_output.stdout_lines
             | select('search', 'LISTMONK_ADMIN_API_TOKEN')
             | list
            ) | first | default('')
          )
          | regex_search('LISTMONK_ADMIN_API_TOKEN="([^"]+)"', '\\1', default='')
        }}
    when: not listmonk_already_bootstrapped
    no_log: "{{ not debug_mode | default(false) }}"

  - name: Fail if API token was not found in install output
    fail:
      msg: >
        Failed to extract API token from Listmonk install output.
        Make sure the install created the API user and printed the token.
    when:
      - not listmonk_already_bootstrapped
      - listmonk_api_token is not defined or listmonk_api_token == ""
    no_log: "{{ not debug_mode | default(false) }}"

  - name: Configure Listmonk settings via API
    uri:
      url: "{{ listmonk.api_url }}/settings"
      method: PUT
      headers:
        Authorization: "token {{ listmonk_bootstrap_LISTMONK_ADMIN_API_USER }}:{{ listmonk_api_token }}"
        Content-Type: "application/json"
      body_format: raw
      body:
        app.site_name: "Mailing list renamed by Ansible"
      status_code: 200
    when:
      - listmonk_api_token is defined and listmonk_api_token | length > 0
    no_log: "{{ not debug_mode | default(false) }}"

  - name: Flush pending handlers
    ansible.builtin.meta: flush_handlers

  - name: "Start and wait for listmonk service"
    ansible.builtin.include_tasks: start.yml

  - name: Check service status
    ansible.builtin.systemd_service:
      name: "{{ listmonk.service_name }}"
    register: listmonk_service_status
    changed_when: false

  - name: "Notify that setup was bootstrapped successfully"
    when:
      - not ansible_local.listmonk.general.bootstrapped | default(false) | bool # it was not bootstrapped prior to the current role's execution
      - listmonk_service_status.status.ActiveState == "active"                  # but it is now
    ansible.builtin.assert: { that: true, quiet: true }
    changed_when: true
    notify:
      - bootstrapped

  - name: Flush pending handlers
    ansible.builtin.meta: flush_handlers