---
- name: Validate OS family
  ansible.builtin.assert:
    that:
      - ansible_os_family in ["RedHat"]
    quiet: true
    fail_msg: "Can only install on RedHat OS family; found {{ ansible_os_family }}"
    success_msg: "Installing on {{ ansible_os_family }}"

- name: Load OS specific variables
  ansible.builtin.include_vars: "vars/{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- name: Ensure required packages are installed
  ansible.builtin.include_tasks: fastpackages.yml
  vars:
    packages_list: "{{ listmonk_prereq_package_list }}"

- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ listmonk_download_path }}"
  register: local_path
  delegate_to: localhost
  run_once: true
  become: false

- name: Validate local download path
  ansible.builtin.assert:
    that:
      - local_path.stat.exists
      - local_path.stat.readable
      - listmonk_offline_install or local_path.stat.writeable
    quiet: true
    fail_msg: "Defined controller path for downloading resources is incorrect or unreadable: {{ listmonk_download_path }}"
    success_msg: "Will download resource to controller path: {{ listmonk_download_path }}"
  delegate_to: localhost
  run_once: true

- name: Check downloaded archive if offline
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ listmonk.bundle }}"
  when: listmonk_offline_install
  register: local_archive_path_check
  delegate_to: localhost
  run_once: true

- name: Validate local downloaded archive if offline
  ansible.builtin.assert:
    that:
      - local_archive_path_check.stat.exists
      - local_archive_path_check.stat.readable
    quiet: true
    fail_msg: "Configured for offline install but install archive not found at: {{ local_path.stat.path }}/{{ listmonk.bundle }}"
    success_msg: "Will install offline with expected archive: {{ local_path.stat.path }}/{{ listmonk.bundle }}"
  when: listmonk_offline_install
  delegate_to: localhost
  run_once: true

- name: Validate admin console user name
  ansible.builtin.assert:
    that:
      - listmonk_bootstrap_LISTMONK_ADMIN_USER is defined
      - listmonk_bootstrap_LISTMONK_ADMIN_USER | length > 3
    quiet: true
    fail_msg: "The console administrator username is empty or invalid. Please set the listmonk_bootstrap_LISTMONK_ADMIN_USER to a 4+ char long string"
    success_msg: "Console administrator username OK"

- name: Validate admin console password
  ansible.builtin.assert:
    that:
      - listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD is defined
      - listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD | length > 7
    quiet: true
    fail_msg: "The console administrator password is empty or invalid. Please set the listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD to an 8+ char long string"
    success_msg: "Console administrator password OK"

- name: Validate db password
  ansible.builtin.assert:
    that:
      - listmonk_config_db_password is defined
      - listmonk_config_db_password | length > 7
    quiet: true
    fail_msg: "The db password is empty or invalid. Please set the listmonk_config_db_password to an 8+ char long string"
    success_msg: "DB password OK"

- name: Validate the name for Admin API User
  ansible.builtin.assert:
    that:
      - listmonk_bootstrap_LISTMONK_ADMIN_API_USER is defined
      - listmonk_bootstrap_LISTMONK_ADMIN_API_USER | length > 3
    quiet: true
    fail_msg: "The LISTMONK_ADMIN_API_USER is empty or invalid. Please set the listmonk_bootstrap_LISTMONK_ADMIN_API_USER to a 4+ char long string"
    success_msg: "Admin API User name OK"

- name: Validate that all sensitive strings are not the same
  ansible.builtin.assert:
    that:
      - listmonk_bootstrap_LISTMONK_ADMIN_USER != listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD
      - listmonk_bootstrap_LISTMONK_ADMIN_USER != listmonk_config_db_password
      - listmonk_bootstrap_LISTMONK_ADMIN_USER != listmonk_bootstrap_LISTMONK_ADMIN_API_USER
      - listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD != listmonk_config_db_password
      - listmonk_bootstrap_LISTMONK_ADMIN_PASSWORD != listmonk_bootstrap_LISTMONK_ADMIN_API_USER
      - listmonk_config_db_password != listmonk_bootstrap_LISTMONK_ADMIN_API_USER
    fail_msg: >
      Sensitive values for usernames and passwords must be unique.
      Please ensure admin user, admin password, db password,
      and admin API user are all different.
    success_msg: "All sensitive usernames and passwords are unique."

- name: "Validate additional env variables for service"
  ansible.builtin.assert:
    that:
      - item.key is defined and item.key | length > 0
      - item.key | lower not match(".*(pass|secret|token|key|cred).*")
      - item.value is defined and item.value | length > 0
    quiet: true
    fail_msg: >-
      Additional env variable definition is incorrect: `key` and `value` are mandatory.
      additional_env_vars is not secure
      and it must not have sensitive data like 'pass', 'secret', 'token', 'key', or 'cred'.
  no_log: true
  loop: "{{ listmonk_service_additional_env_vars }}"

- name: Validate Listmonk API settings structure and SMTP config
  assert:
    that:
      - listmonk_api_settings_payload is mapping
      - "'smtp' in listmonk_api_settings_payload"
      - listmonk_api_settings_payload.smtp is iterable
      - listmonk_api_settings_payload.smtp | selectattr('enabled') | list | length > 0
    fail_msg: >-
      listmonk_api_settings_payload must:
        - be a dictionary (mapping),
        - contain 'smtp' key,
        - have at least one SMTP entry with enabled: true.
  no_log: true
  when: listmonk.override_settings

- name: Validate listmonk_api_settings_payload.app.lang is defined and not empty
  assert:
    that:
      - "'app.lang' in listmonk_api_settings_payload"
      - listmonk_api_settings_payload['app.lang'] | length > 0
    fail_msg: >-
      The 'app.lang' field must be defined and not empty in listmonk_api_settings_payload.
      Example:
        app.lang: "en"
  when: listmonk.override_settings

- name: Validate listmonk_api_settings_payload.upload.provider is defined and not empty
  assert:
    that:
      - "'upload.provider' in listmonk_api_settings_payload"
      - listmonk_api_settings_payload['upload.provider'] | length > 0
    fail_msg: >-
      The 'upload.provider' field must be defined and not empty in listmonk_api_settings_payload.
      Examples:
        upload.provider: "filesystem"
        upload.provider: "s3"
  when: listmonk.override_settings
